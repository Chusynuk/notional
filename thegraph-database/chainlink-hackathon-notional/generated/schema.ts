// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ActiveEscrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ActiveEscrow entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ActiveEscrow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ActiveEscrow", id.toString(), this);
    }
  }

  static load(id: string): ActiveEscrow | null {
    return changetype<ActiveEscrow | null>(store.get("ActiveEscrow", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get escrowContract(): Bytes {
    let value = this.get("escrowContract");
    return value!.toBytes();
  }

  set escrowContract(value: Bytes) {
    this.set("escrowContract", Value.fromBytes(value));
  }

  get arbiter(): Bytes {
    let value = this.get("arbiter");
    return value!.toBytes();
  }

  set arbiter(value: Bytes) {
    this.set("arbiter", Value.fromBytes(value));
  }

  get depositor(): Bytes {
    let value = this.get("depositor");
    return value!.toBytes();
  }

  set depositor(value: Bytes) {
    this.set("depositor", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get ownerUserName(): string {
    let value = this.get("ownerUserName");
    return value!.toString();
  }

  set ownerUserName(value: string) {
    this.set("ownerUserName", Value.fromString(value));
  }

  get issueId(): string {
    let value = this.get("issueId");
    return value!.toString();
  }

  set issueId(value: string) {
    this.set("issueId", Value.fromString(value));
  }

  get repo(): string {
    let value = this.get("repo");
    return value!.toString();
  }

  set repo(value: string) {
    this.set("repo", Value.fromString(value));
  }

  get url(): string {
    let value = this.get("url");
    return value!.toString();
  }

  set url(value: string) {
    this.set("url", Value.fromString(value));
  }
}

export class EscrowCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EscrowCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EscrowCreated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EscrowCreated", id.toString(), this);
    }
  }

  static load(id: string): EscrowCreated | null {
    return changetype<EscrowCreated | null>(store.get("EscrowCreated", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get escrowContract(): Bytes {
    let value = this.get("escrowContract");
    return value!.toBytes();
  }

  set escrowContract(value: Bytes) {
    this.set("escrowContract", Value.fromBytes(value));
  }

  get arbiter(): Bytes {
    let value = this.get("arbiter");
    return value!.toBytes();
  }

  set arbiter(value: Bytes) {
    this.set("arbiter", Value.fromBytes(value));
  }

  get depositor(): Bytes {
    let value = this.get("depositor");
    return value!.toBytes();
  }

  set depositor(value: Bytes) {
    this.set("depositor", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get ownerUserName(): string {
    let value = this.get("ownerUserName");
    return value!.toString();
  }

  set ownerUserName(value: string) {
    this.set("ownerUserName", Value.fromString(value));
  }

  get issueId(): string {
    let value = this.get("issueId");
    return value!.toString();
  }

  set issueId(value: string) {
    this.set("issueId", Value.fromString(value));
  }

  get repo(): string {
    let value = this.get("repo");
    return value!.toString();
  }

  set repo(value: string) {
    this.set("repo", Value.fromString(value));
  }

  get url(): string {
    let value = this.get("url");
    return value!.toString();
  }

  set url(value: string) {
    this.set("url", Value.fromString(value));
  }
}

export class EscrowClosed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EscrowClosed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EscrowClosed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EscrowClosed", id.toString(), this);
    }
  }

  static load(id: string): EscrowClosed | null {
    return changetype<EscrowClosed | null>(store.get("EscrowClosed", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get escrowContract(): Bytes {
    let value = this.get("escrowContract");
    return value!.toBytes();
  }

  set escrowContract(value: Bytes) {
    this.set("escrowContract", Value.fromBytes(value));
  }

  get issueId(): string {
    let value = this.get("issueId");
    return value!.toString();
  }

  set issueId(value: string) {
    this.set("issueId", Value.fromString(value));
  }
}

export class EscrowClosedAfterApprove extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EscrowClosedAfterApprove entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EscrowClosedAfterApprove must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EscrowClosedAfterApprove", id.toString(), this);
    }
  }

  static load(id: string): EscrowClosedAfterApprove | null {
    return changetype<EscrowClosedAfterApprove | null>(
      store.get("EscrowClosedAfterApprove", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get escrowContract(): Bytes {
    let value = this.get("escrowContract");
    return value!.toBytes();
  }

  set escrowContract(value: Bytes) {
    this.set("escrowContract", Value.fromBytes(value));
  }

  get issueId(): string {
    let value = this.get("issueId");
    return value!.toString();
  }

  set issueId(value: string) {
    this.set("issueId", Value.fromString(value));
  }
}

export class NewDeveloper extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NewDeveloper entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NewDeveloper must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NewDeveloper", id.toString(), this);
    }
  }

  static load(id: string): NewDeveloper | null {
    return changetype<NewDeveloper | null>(store.get("NewDeveloper", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get developer(): Bytes {
    let value = this.get("developer");
    return value!.toBytes();
  }

  set developer(value: Bytes) {
    this.set("developer", Value.fromBytes(value));
  }

  get loginName(): string {
    let value = this.get("loginName");
    return value!.toString();
  }

  set loginName(value: string) {
    this.set("loginName", Value.fromString(value));
  }
}
